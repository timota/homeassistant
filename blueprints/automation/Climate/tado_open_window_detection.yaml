blueprint:
  name: Tado open window detection
  description: >
    # Tado open window detection

    **Version: 1.3.0**


    Tado Open Window Detection uses sensors to detect open windows or doors and temporarily turns off heating or cooling to save energy.


    <details>
    <summary><b>Summary:</b> ðŸ‘ˆ</summary>

      - Climate devices, such as heating, turn off when a window is opened and revert to their previous state once the window is closed. 
        
      - You can set a delay before the climate device returns to its previous state.

      - The supported HVAC modes are: auto, heat, and off.

      - For this automation to function, a mandatory text helper is required to store the current climate state, including mode and target temperature.

      - Support window/door open/close debounce interval equal minimum open/close time to prevent false operations(more info in Notes below)  

    </details>
    </br>
    <details>
    <summary><b>Changelog:</b> ðŸ‘ˆ</summary>

      - **Version: 1.3.0** - Introduce new debounce feature. Use single mode by default. 
      - **Version: 1.2.0** - change automation mode from single to queued to prevent missing actions. Used to cover edge cases. 
      - **Version: 1.1.1** - Initial release

    </details>
    </br>
    <details>
    <summary><b>Notes:</b> ðŸ‘ˆ</summary>

      - [Fixed] - Edge case with minimum_close_time/open_time. 
        When window opened/closed and immidietly opened/closed again (minimum_x_time not passed) - old saved record restored. 
        Example: 
          - window opened, state record saved, climate off. 
          - window closes and immediately opens again. 
          - Close action not triggered, as minimum_x_time not passed.
          - Open action triggered as minimum_x_time passed and rewrite current saved record with incorrect state, eg: off

      - [Not confirmed] - Possible issue with incorrect debounce handling when debounce intervals are different for open and close minimum times. 

      - [ToDo:{2}] - possible option to restore saved state in case of any changes made during normal operation, eg: mode/temp changed by external process after window was opened.

    </details>

    Required = *

  domain: automation
  author: timota
  homeassistant: 
    min_version: 2024.12.0
  input:
    trigger:
      name: "Trigger *"
      icon: mdi:cog-outline
      collapsed: true
      input:
        door_window_trigger:
          name: Trigger Sensor - Window Sensors
          description: >
            The window sensor that controls the climate entity. If you have more window sensors please make a group sensor.
          default: ""
          selector:
            entity:
              filter:
                domain:
                  - binary_sensor
                  - input_boolean
              multiple: false
    thermostat:
      name: "Thermostat *"
      icon: mdi:thermostat-cog
      collapsed: true
      input:
        climate_device:
          name: Climate device
          description: >
            The climate entity that is controlled by the window sensor.
          default: ""
          selector:
            entity:
              filter:
                domain:
                  - climate
              multiple: false
    helper:
      name: "Configuration"
      icon: mdi:cog-outline
      collapsed: true
      input:
        helper_climate_state:
          name: "(Required) Helper - Climate state *"
          description: >
            Input Text used to store the last thermostate state: mode and target temperature. 

            You will need to manually create a text input entity for this, please read the blueprint Additional Notes for more info.
          default: ""
          selector:
            entity:
              filter:
                domain:
                  - input_text
              multiple: false
        minimum_open_time:
          name: Miniumum open time
          description: Time in seconds to wait until the automation is triggered
          default: 12
          selector:
            number:
              min: 0.0
              max: 300.0
              unit_of_measurement: seconds
              mode: slider
              step: 1.0
        minimum_close_time:
          name: Miniumum close time
          description: Time in seconds to wait until the climate entity is turned on again
          default: 12
          selector:
            number:
              min: 0.0
              max: 300.0
              unit_of_measurement: seconds
              mode: slider
              step: 1.0
        automation_mode:
          name: Automation mode
          description: The automationâ€™s mode configuration option controls what happens when the automation is triggered while the actions are still running from a previous trigger.
          default: single
          selector:
            select:
              mode: list
              options:
                - label: Queued
                  value: queued
                - label: Single
                  value: single

variables:
  helper_climate_state: !input helper_climate_state
  climate_device: !input climate_device
  minimum_open_time: !input minimum_open_time
  minimum_close_time: !input minimum_close_time

mode: !input automation_mode

triggers:
  - trigger: state
    id: "t0_on"
    entity_id: !input door_window_trigger
    from: "off"
    to: "on"
    for: !input minimum_open_time
  - trigger: state
    id: "t0_off"
    entity_id: !input door_window_trigger
    from: "on"
    to: "off"
    for: !input minimum_close_time

conditions:
  - condition: or
    conditions:
      - condition: and
        conditions:
          - condition: trigger
            id: t0_on
          - condition: template
            value_template: >-
              {{ (as_timestamp(trigger.to_state.last_changed) -
              as_timestamp(trigger.from_state.last_changed)) > minimum_close_time }}
      - condition: and
        conditions:
          - condition: trigger
            id: t0_off
          - condition: template
            value_template: >-
              {{ (as_timestamp(trigger.to_state.last_changed) -
              as_timestamp(trigger.from_state.last_changed)) > minimum_open_time }}
actions:
  - choose:
      - alias: "Window opened"
        conditions:
          - condition: trigger
            id: "t0_on"
        sequence:
          - alias: "Save climate_device state into helper"
            action: input_text.set_value
            data:
              entity_id: "{{ helper_climate_state }}"
              value: >-
                {{ {"s": states(climate_device),"tt": state_attr(climate_device,'temperature'),"t":as_timestamp(now()) } | to_json }}

          - alias: Climate mode other than Off
            if:
              - condition: template
                value_template: >-
                  {{ not is_state(climate_device, "off") }}
            then:
              - alias: "Switch off climate"
                action: climate.set_hvac_mode
                target:
                  entity_id: "{{ climate_device }}"
                data:
                  hvac_mode: "off"

      - alias: "Window closed"
        conditions:
          - condition: trigger
            id: "t0_off"
          - '{{ is_state(climate_device, "off") }}'
        sequence:
          - alias: Load climate_device state and temp from helper
            variables:
              climate_mode: "{{ (states(helper_climate_state) | from_json).s }}"
              climate_temp: "{{ (states(helper_climate_state) | from_json).tt | float }}"

          # ToDo:{2}: possible option to restore saved state in case of any changes made during normal operation, eg: mode/temp changed when window was opened.
          - alias: "If saved climate mode is off - do nothing"
            if:
              - condition: template
                value_template: "{{ climate_mode != 'off' }}"
            then:
              - alias: "Restore climate device state"
                action: >
                  {% if climate_mode != 'heat' %}
                    climate.set_hvac_mode
                  {% else %}
                    climate.set_temperature
                  {% endif %}
                target:
                  entity_id: "{{ climate_device }}"
                data: >
                  {% if climate_mode != 'heat' %}
                    { "hvac_mode": "{{climate_mode}}" }
                  {% else %}
                    { "hvac_mode": "{{climate_mode}}", "temperature": {{climate_temp}} }
                  {% endif %}